AWSTemplateFormatVersion: 2010-09-09
Description: "cloudformation template to register AWS account to nOps"

Parameters: 
  ReportName:
    Type: String
    Default: nopsbilling-daily-gzip
    Description: nOps daily generated report name.

  s3prefix:
    Type: String
    Default: something
    Description: nOps daily generated reports folder prefix.

  BucketName:
    Type: String
    Default: nopsbucketforlogs
    Description: s3 bucket name for nOps daily reports.

  nOpsApiKey:
    Type: String
    NoEcho: true
    Description: nOps api key to register AWS accounts.

  AccNameToRegister:
    Type: String
    Description: Account name to register in nOps.

  nOpsPrivateKey:
    Type: String
    NoEcho: true
    Default: ''
    Description: nOps private key to generate signature for api request, it should be single line string (optional).

Resources:
  nopsBucketForLogs:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub '${BucketName}-${AWS::AccountId}'


  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref nopsBucketForLogs
      PolicyDocument:
        Version: 2012-10-17
        Id : 'Policy1335892530063'
        Statement:
          - Action:
              - 's3:GetBucketAcl'
              - 's3:GetBucketPolicy'
            Effect: Allow
            Sid: 'Stmt1335892150622'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref nopsBucketForLogs
            Principal: 
              Service: 'billingreports.amazonaws.com'
            Condition:
              StringEquals:
                  aws:SourceArn: !Sub 'arn:aws:cur:${AWS::Region}:${AWS::AccountId}:definition/*'
                  aws:SourceAccount: !Sub '${AWS::AccountId}'

          - Action:
              - 's3:PutObject'
            Effect: Allow
            Sid: 'Stmt1335892526596'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref nopsBucketForLogs
                - /*
            Principal: 
              Service: 'billingreports.amazonaws.com'
            Condition:
              StringEquals:
                  aws:SourceArn: !Sub 'arn:aws:cur:${AWS::Region}:${AWS::AccountId}:definition/*'
                  aws:SourceAccount: !Sub '${AWS::AccountId}'


  nopsReportDefinition:
    Type: AWS::CUR::ReportDefinition
    DependsOn: 
      - nopsBucketForLogs
      - BucketPolicy
    Properties: 
      AdditionalArtifacts: 
        - "REDSHIFT"
        - "QUICKSIGHT"
      AdditionalSchemaElements: 
        - "RESOURCES"
      Compression: "GZIP"
      RefreshClosedReports: true
      Format: "textORcsv"
      ReportName: !Ref ReportName
      ReportVersioning: "OVERWRITE_REPORT"
      S3Bucket: !Ref nopsBucketForLogs
      S3Prefix: !Ref s3prefix
      S3Region: !Sub '${AWS::Region}'
      TimeUnit: "DAILY"

  nopsLambdaExecutionRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - PolicyName: "InlinePolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: 
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  LambdaGenUUID:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Join [ "", [ "nops-register-aws-account-", !Ref AWS::Region ] ]
        S3Key: "generate_external_id.zip"
      PackageType: Zip
      Handler: "generate_external_id.cloudformation_handler"
      Role: !GetAtt nopsLambdaExecutionRole.Arn
      Runtime: "python3.8"
      Timeout: 150
      FunctionName: "generate-external-id"
    DependsOn: 
      - nopsLambdaExecutionRole

  PermissionLambdaGenUUID:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt [ LambdaGenUUID, Arn ]
      Principal: 'cloudformation.amazonaws.com'
      SourceAccount: !Ref "AWS::AccountId"
    DependsOn: 
      - LambdaGenUUID

  TriggerLambdaGenUUID:
    Type: Custom::TriggerLambdaGenUUID
    Properties:
      ServiceToken : !GetAtt [ LambdaGenUUID, Arn ]
    DependsOn: 
      - PermissionLambdaGenUUID

  nopsAccessIamRole: 
    Type: "AWS::IAM::Role"
    DependsOn: 
      - TriggerLambdaGenUUID
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              AWS: "202279780353"
            Action: 
              - "sts:AssumeRole"
            Condition:
              StringEquals:
                  sts:ExternalId: !GetAtt TriggerLambdaGenUUID.external_id
      Path: "/"
      Policies: 
        - PolicyName: "InlinePolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: 
                  - "autoscaling:DescribeAutoScalingGroups"
                  - "ce:GetCostAndUsage"
                  -  "ce:GetReservationPurchaseRecommendation"
                  -  "ce:GetRightsizingRecommendation"
                  -  "ce:GetSavingsPlansPurchaseRecommendation"
                  -  "cloudformation:DescribeStackResources"
                  -  "cloudformation:DescribeStacks"
                  -  "cloudformation:GetTemplate"
                  -  "cloudfront:ListDistributions"
                  -  "cloudtrail:DescribeTrails"
                  -  "cloudtrail:GetTrailStatus"
                  -  "cloudtrail:LookupEvents"
                  -  "cloudwatch:DescribeAlarms"
                  -  "cloudwatch:GetMetricStatistics"
                  -  "cloudwatch:ListMetrics"
                  -  "config:DescribeConfigurationRecorderStatus"
                  -  "config:DescribeConfigurationRecorders"
                  -  "config:DescribeDeliveryChannelStatus"
                  -  "config:DescribeDeliveryChannels"
                  -  "cur:DescribeReportDefinitions"
                  -  "cur:PutReportDefinition"
                  -  "dynamodb:DescribeContinuousBackups"
                  -  "dynamodb:DescribeTable"
                  -  "dynamodb:ListTables"
                  -  "ec2:DescribeAddresses"
                  -  "ec2:DescribeClientVpnConnections"
                  -  "ec2:DescribeImages"
                  -  "ec2:DescribeInstanceAttribute"
                  -  "ec2:DescribeInstanceStatus"
                  -  "ec2:DescribeInstances"
                  -  "ec2:DescribeFlowLogs"
                  -  "ec2:DescribeNatGateways"
                  -  "ec2:DescribeNetworkInterfaces"
                  -  "ec2:DescribeReservedInstancesOfferings"
                  -  "ec2:DescribeRouteTables"
                  -  "ec2:DescribeSecurityGroups"
                  -  "ec2:DescribeSnapshots"
                  -  "ec2:DescribeSubnets"
                  -  "ec2:DescribeVolumes"
                  -  "ec2:DescribeVpcs"
                  -  "ecs:DescribeClusters"
                  -  "ecs:ListClusters"
                  -  "eks:ListClusters"
                  -  "elasticache:DescribeCacheClusters"
                  -  "elasticache:DescribeCacheSubnetGroups"
                  -  "elasticache:DescribeReplicationGroups"
                  -  "elasticfilesystem:DescribeFileSystems"
                  -  "elasticloadbalancing:DescribeLoadBalancers"
                  -  "elb:DescribeLoadBalancers"
                  -  "es:DescribeElasticsearchDomains"
                  -  "guardduty:ListDetectors"
                  -  "iam:GetAccessKeyLastUsed"
                  -  "iam:GetAccountPasswordPolicy"
                  -  "iam:GetAccountSummary"
                  -  "iam:GetLoginProfile"
                  -  "iam:GetRole"
                  -  "iam:ListAccessKeys"
                  -  "iam:ListAccountAliases"
                  -  "iam:ListAttachedGroupPolicies"
                  -  "iam:ListAttachedUserPolicies"
                  -  "iam:ListGroupsForUser"
                  -  "iam:ListMFADevices"
                  -  "iam:ListRoles"
                  -  "iam:ListUserPolicies"
                  -  "iam:ListUsers"
                  -  "inspector:ListAssessmentRuns"
                  -  "kms:ListKeys"
                  -  "lambda:GetFunction"
                  -  "lambda:GetPolicy"
                  -  "lambda:ListFunctions"
                  -  "rds:DescribeDBInstances"
                  -  "rds:DescribeDBSnapshots"
                  -  "rds:DescribePendingMaintenanceActions"
                  -  "rds:ListTagsForResource"
                  -  "redshift:DescribeClusters"
                  -  "s3:GetBucketAcl"
                  -  "s3:GetBucketLogging"
                  -  "s3:GetBucketPolicy"
                  -  "s3:GetBucketPolicyStatus"
                  -  "s3:GetBucketPublicAccessBlock"
                  -  "s3:GetBucketVersioning"
                  -  "s3:GetEncryptionConfiguration"
                  -  "s3:ListAllMyBuckets"
                  -  "ssm:ListComplianceSummaries"
                  -  "support:DescribeCases"
                  -  "support:DescribeTrustedAdvisorCheckRefreshStatuses"
                  -  "support:DescribeTrustedAdvisorCheckResult"
                  -  "support:DescribeTrustedAdvisorChecks"
                  -  "tag:getResources"
                  -  "tag:getTagKeys"
                  -  "tag:getTagValues"
                  -  "wellarchitected:*"
                  -  "workspaces:DescribeWorkspaceDirectories"
                  -  "workspaces:DescribeWorkspaces"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "s3:*"
                Resource:
                  - !Sub 'arn:aws:s3:::${BucketName}-${AWS::AccountId}'
                  - !Sub 'arn:aws:s3:::${BucketName}-${AWS::AccountId}/*'

  LambdaRegisterAwsAcc:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Join [ "", [ "nops-register-aws-account-", !Ref AWS::Region ] ]
        S3Key: "nops_register_aws_acc.zip"
      PackageType: Zip
      Handler: "nops_register_aws_acc.cloudformation_handler"
      Role: !GetAtt nopsLambdaExecutionRole.Arn
      Runtime: "python3.8"
      Timeout: 150
      FunctionName: "nops-register-aws-account"
      Environment:
        Variables:
          api_key: !Ref nOpsApiKey
          external_id: !GetAtt TriggerLambdaGenUUID.external_id
          report_name: !Ref ReportName
          s3prefix: !Ref s3prefix
          private_key: !Ref nOpsPrivateKey
          iam_role_for_nops: !GetAtt nopsAccessIamRole.Arn
          s3_bucket_name_for_nops: !Sub '${BucketName}-${AWS::AccountId}'
          aws_acc_name_to_register_in_nops: !Sub '${AccNameToRegister}-${AWS::AccountId}'
    DependsOn: 
      - nopsLambdaExecutionRole
      - nopsAccessIamRole

  PermissionLambdaRegisterAwsAcc:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt [ LambdaRegisterAwsAcc, Arn ]
      Principal: 'cloudformation.amazonaws.com'
      SourceAccount: !Ref "AWS::AccountId"

  TriggerLambdaRegisterAwsAcc:
    Type: Custom::TriggerLambdaRegisterAwsAcc
    Properties:
      ServiceToken : !GetAtt [ LambdaRegisterAwsAcc, Arn ]